[{"D:\\Damsy\\react\\prototype\\src\\index.js":"1","D:\\Damsy\\react\\prototype\\src\\Application.jsx":"2","D:\\Damsy\\react\\prototype\\src\\component\\Import.jsx":"3","D:\\Damsy\\react\\prototype\\src\\component\\Report.jsx":"4","D:\\Damsy\\react\\prototype\\src\\component\\Preview.jsx":"5","D:\\Damsy\\react\\prototype\\src\\logic\\XLSXImport.jsx":"6","D:\\Damsy\\react\\prototype\\src\\logic\\Plot.jsx":"7","D:\\Damsy\\react\\prototype\\src\\utility\\applyVerticalAlignment.jsx":"8","D:\\Damsy\\react\\prototype\\src\\entity\\Grade.jsx":"9","D:\\Damsy\\react\\prototype\\src\\entity\\TopicDefinition.jsx":"10","D:\\Damsy\\react\\prototype\\src\\entity\\Student.jsx":"11","D:\\Damsy\\react\\prototype\\src\\entity\\Topic.jsx":"12","D:\\Damsy\\react\\prototype\\src\\component\\ReportHtml2pdf.jsx":"13"},{"size":231,"mtime":1615907157077,"results":"14","hashOfConfig":"15"},{"size":1958,"mtime":1615913764981,"results":"16","hashOfConfig":"15"},{"size":1306,"mtime":1615907157075,"results":"17","hashOfConfig":"15"},{"size":8560,"mtime":1616330277461,"results":"18","hashOfConfig":"15"},{"size":4439,"mtime":1615913703340,"results":"19","hashOfConfig":"15"},{"size":4904,"mtime":1615912785583,"results":"20","hashOfConfig":"15"},{"size":3910,"mtime":1615913479415,"results":"21","hashOfConfig":"15"},{"size":3155,"mtime":1615907157080,"results":"22","hashOfConfig":"15"},{"size":490,"mtime":1616333228002,"results":"23","hashOfConfig":"15"},{"size":294,"mtime":1615910231222,"results":"24","hashOfConfig":"15"},{"size":1327,"mtime":1616332889547,"results":"25","hashOfConfig":"15"},{"size":245,"mtime":1615907157077,"results":"26","hashOfConfig":"15"},{"size":6578,"mtime":1615913640632,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"10kc8ny",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},"D:\\Damsy\\react\\prototype\\src\\index.js",[],["59","60"],"D:\\Damsy\\react\\prototype\\src\\Application.jsx",["61"],"import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Import from './component/Import';\r\nimport Preview from './component/Preview';\r\nimport Report from './component/Report';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst defaultSelection = {trimester: 0, class: 0};\r\n\r\nconst Application = () => {\r\n    const [data, setData] = React.useState(undefined);\r\n    const [selected, setSelected] = React.useState(defaultSelection);\r\n\r\n    const ref = React.useRef();\r\n\r\n    const handleImportChange = result => setData(result);\r\n    const handleClear = () => {\r\n        setData(undefined);\r\n        setSelected(defaultSelection);\r\n    };\r\n    const handlePreviewChange = (property, value) => {\r\n        setSelected({...selected, [property]: value});\r\n    };\r\n\r\n    if (data) console.log(data);\r\n\r\n    // React.useEffect(() => {\r\n    //     axios.get(\"http://127.0.0.1:8000/subject/\")\r\n    //         .then(res => console.log(res))\r\n    //         .catch(err => console.log(err));\r\n    // })\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"d-flex justify-content-center border-bottom pb-1\">{'Prototype v0.1'}</h1>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <div className=\"row w-100\">\r\n                    <div className=\"col-3\">\r\n                        <div className=\"bg-light p-4 d-flex flex-column justify-content-between\" style={{height: '90vh'}}>\r\n                            <Import onChange={ handleImportChange } onClear={ handleClear } />\r\n                            <Report plotRef={ ref } data={ data } selected={ selected } />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <Preview plotRef={ ref } data={ data } selected={ selected } onChange={ handlePreviewChange } />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Application;\r\n","D:\\Damsy\\react\\prototype\\src\\component\\Import.jsx",[],"D:\\Damsy\\react\\prototype\\src\\component\\Report.jsx",["62"],"D:\\Damsy\\react\\prototype\\src\\component\\Preview.jsx",["63"],"import React from 'react';\r\nimport {select} from 'd3';\r\n\r\nimport Plot from '../logic/Plot'\r\n\r\nconst TAB = {\r\n    SUMMARY: 0,\r\n    PREVIEW: 1\r\n};\r\n\r\nconst Preview = ({data, selected, onChange, plotRef}) => {\r\n    const [activeTab, setActiveTab] = React.useState(TAB.SUMMARY);\r\n    const svgRef = React.useRef(null);\r\n\r\n    if (!data) return null;\r\n\r\n    const handleTabChange = newTabId => setActiveTab(newTabId);\r\n\r\n    const renderTrimesterButtons = data.map((d, i) => {\r\n        const handleClick = () => onChange('trimester', i);\r\n        const buttonClass = 'd-flex flex-grow-1 btn m-1 ' + (selected.trimester === i ? 'btn-success' : 'btn-secondary'); \r\n        return (\r\n            <button key={ d.metaData.trimester } onClick={ handleClick } className={ buttonClass }>{'Trimester ' + d.metaData.trimester}</button>\r\n        );\r\n    });\r\n\r\n    const {file, classes, topics, metaData} = data[selected.trimester];\r\n\r\n    const renderTopics = topics.map((topic, i) => {\r\n        return (\r\n            <h6 key={ topic + i} className=\"p-1 col border\" >{topic}</h6>\r\n        );\r\n    });\r\n\r\n    const renterClassButtons = classes.map((currentClass, i) => {\r\n        const handleClick = () => onChange('class', i);\r\n        const buttonClass = 'd-flex flex-grow-1 btn m-1 ' + (selected.class === i ? 'btn-success' : 'btn-secondary'); \r\n        return (\r\n            <button key={ currentClass.name } onClick={ handleClick } className={ buttonClass }>{'Class ' + currentClass.name}</button>\r\n        );\r\n    })\r\n\r\n    const selectedClass = classes[selected.class];\r\n\r\n    return (\r\n        <div ref={ plotRef } className=\"m-1\">\r\n            <h6 className=\"border-bottom pb-1 mt-2\">{'Imported from: ' + file.name}</h6>\r\n            <h6 className=\"d-flex justify-content-around\">\r\n                <p className=\"mb-0\">Teacher: {metaData.teacher}</p>\r\n                <p className=\"mb-0\">Subject: {metaData.subject}</p>\r\n                <p className=\"mb-0\">School level: {metaData.level}</p>\r\n                <p className=\"mb-0\">Year: {metaData.year}</p>\r\n            </h6>\r\n            <div className=\"d-flex justify-content-between\">\r\n                {renderTrimesterButtons}\r\n            </div>\r\n            <h6>{'Trimester Topics: '}</h6>\r\n            <div className=\"row mx-1 mb-2\">\r\n                {renderTopics}\r\n            </div>\r\n            <div className=\"d-flex justify-content-between\">\r\n                {renterClassButtons}\r\n            </div>\r\n            <ul className=\"nav nav-tabs\">\r\n                <li className=\"nav-item\" onClick={ () => handleTabChange(TAB.SUMMARY) }>\r\n                    <div style={{cursor: 'pointer'}} className={'nav-link ' + (activeTab === TAB.SUMMARY ? 'active' : '')}>{'Summary'}</div>\r\n                </li>\r\n                <li className=\"nav-item\" onClick={ () => handleTabChange(TAB.PREVIEW) }>\r\n                    <div style={{cursor: 'pointer'}} className={'nav-link ' + (activeTab === TAB.PREVIEW ? 'active' : '')}>{'Preview'}</div>\r\n                </li>\r\n            </ul>\r\n            {activeTab === TAB.SUMMARY && <ClassPreview data={ selectedClass } />}\r\n            {activeTab === TAB.PREVIEW && <ChartPreview canvas={ svgRef } data={ selectedClass } />}\r\n            <div ref={svgRef} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ChartPreview = ({data, canvas}) => {\r\n    const firstStudent = data.students[0];\r\n\r\n    React.useEffect(() => {\r\n        const svgString = Plot.createSVG(firstStudent, {width: 800, height: 500});\r\n        const node = select(canvas.current).append('div').html(svgString);\r\n\r\n        return () => node.remove();\r\n    }, [data, canvas])\r\n\r\n    return (\r\n        <h3>\r\n            {firstStudent.name}\r\n        </h3>\r\n    );\r\n}\r\n\r\nconst ClassPreview = ({data}) => {\r\n    const {students} = data;\r\n\r\n    const renderStudents = students.map(student => {\r\n        return (\r\n            <div key={ student.name } className=\"d-flex row\">\r\n                <div className=\"d-flex col-3\">\r\n                    {student.name}\r\n                </div>\r\n                <div className=\"d-flex col\">\r\n                    {'Ø: [' + student.avarage.assignmentGrade + ' , ' + student.avarage.difficulty + ' , ' + student.avarage.testScore + ']'}\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"border-right border-left border-bottom p-2\">\r\n            {renderStudents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preview;","D:\\Damsy\\react\\prototype\\src\\logic\\XLSXImport.jsx",[],"D:\\Damsy\\react\\prototype\\src\\logic\\Plot.jsx",[],"D:\\Damsy\\react\\prototype\\src\\utility\\applyVerticalAlignment.jsx",[],"D:\\Damsy\\react\\prototype\\src\\entity\\Grade.jsx",[],"D:\\Damsy\\react\\prototype\\src\\entity\\TopicDefinition.jsx",[],"D:\\Damsy\\react\\prototype\\src\\entity\\Student.jsx",[],"D:\\Damsy\\react\\prototype\\src\\entity\\Topic.jsx",[],"D:\\Damsy\\react\\prototype\\src\\component\\ReportHtml2pdf.jsx",["64","65","66"],"import React from 'react';\r\nimport applyVerticalAlignment from '../utility/applyVerticalAlignment';\r\nimport html2Pdf from 'html2pdf.js';\r\n\r\nimport Plot from '../logic/Plot';\r\n\r\nconsole.log(html2Pdf);\r\nconst Report = ({data, selected, plotRef}) => {\r\n\r\n    if (!data) return <button disabled className=\"btn btn-success mt-1\">{'Generate Trimester Report'}</button>;\r\n\r\n    data = data[selected.trimester];\r\n\r\n    const handleClick = () => {\r\n        const {classes, metaData} = data;\r\n        if (!classes) return null;\r\n\r\n        classes.forEach(currentClass => {\r\n\r\n            // const contents = generateContents(currentClass.students, metaData);\r\n            // const docDefinition = generateDocDefinition(contents);\r\n            // pdfMake.createPdf(docDefinition).download(metaData.trimester + ' Trimester ' + metaData.level + currentClass.name + '.pdf');\r\n\r\n            var opt = {\r\n                filename:     'myfile.pdf',\r\n                image:        { type: 'jpeg', quality: 0.98 },\r\n                html2canvas:  { scale: 4 },\r\n                jsPDF:        { unit: 'in', format: 'letter', orientation: 'landscape' }\r\n              };\r\n        \r\n            html2Pdf().set(opt).from(plotRef.current).save()\r\n        })\r\n    }\r\n\r\n    return (\r\n        <button className=\"btn btn-success mt-1\" onClick={ handleClick }>{'Generate Report(s) For Trimester ' + (selected.trimester + 1)}</button>\r\n    );\r\n}\r\n\r\nconst generateDocDefinition = content => {\r\n    return {\r\n        pageOrientation: 'landscape',\r\n        content,\r\n        styles: {\r\n                header: {\r\n                    fontSize: 18,\r\n                    bold: true,\r\n                    margin: [0, 0, 0, 10]\r\n                },\r\n                table: {\r\n                    margin: [0, 5, 0, 15]\r\n                }\r\n        }\r\n    };\r\n}\r\n\r\nconst generateContents = (students, metaData) => {\r\n    return students.map((student, i) => {\r\n        const noBreak = i === 0;\r\n        return generateReportForStudent(student, metaData, noBreak);\r\n    })\r\n}\r\n\r\nconst generateReportForStudent = (student, metaData, noBreak = false) => {\r\n    // const assignments = ['Assignments'].concat(\r\n    //     student.topics.map(topic => {\r\n    //         return {\r\n    //             image: writeRotatedText(topic.name),\r\n    //             fit: [20, 240],\r\n    //             alignment: 'left'\r\n    //         }\r\n    //     })\r\n    // ).concat({text: 'Ø', alignment: 'center'});\r\n    const assignments = ['Assignments'].concat(\r\n            student.topics.map(topic => topic.name)\r\n        ).concat({text: 'Ø', alignment: 'center'});\r\n\r\n    const execution = ['Ausführung'].concat(\r\n        student.topics.map(topic => topic.grade.assignmentGrade)\r\n    ).concat(student.avarage.assignmentGrade);\r\n    \r\n    const stars = ['Sterne'].concat(\r\n        student.topics.map(topic => convertToStars(topic.grade.difficulty))\r\n    ).concat(student.avarage.difficulty);\r\n\r\n    const score = ['Prüfung in %'].concat(\r\n        student.topics.map(topic => ({text: topic.grade.testScore, fillColor: getFillColor(topic.grade.testScore)}))\r\n    ).concat({text: student.avarage.testScore, fillColor: getFillColor(student.avarage.testScore)});\r\n\r\n    const plot = Plot.createSVG(student);\r\n\r\n    const content = [\r\n        {\r\n            pageBreak: noBreak ? undefined : 'before',\r\n            table: {\r\n                headerRows: 1,\r\n                widths: ['*', 200],\r\n                body: [\r\n                    [\r\n                        {text: 'Leistungsnachweis ' + metaData.subject, style: 'header', fillColor: '#eeeeee'}, \r\n                        {text: metaData.trimester + ' Trimester ' + metaData.year, style: 'header', fillColor: '#eeeeee', alignment: 'right'}\r\n                    ]\r\n                ]\r\n            },\r\n            layout: 'lightHorizontalLines',\r\n            style: 'table'\r\n        },\r\n        {text: 'Name: ' + student.name},\r\n        {\r\n            style: 'table',\r\n            table: {\r\n                body: [\r\n                    assignments,\r\n                    execution,\r\n                    stars,\r\n                    score\r\n                ]\r\n            },\r\n            layout: { paddingTop: function (index, node) {\r\n                if(index === 0) applyVerticalAlignment(node, index, 'bottom');\r\n                return 0;\r\n            }, },\r\n        },\r\n        {\r\n            svg: plot,\r\n            alignment: 'center'\r\n        }\r\n    ];\r\n\r\n    return content;\r\n}\r\n\r\nfunction convertToStars(value) {\r\n    if (isSpecialRemark(value)) return value;\r\n    let str = '';\r\n    for (let index = 0; index < value; index++) {\r\n        str += '*';                \r\n    }\r\n    return str;\r\n}\r\n\r\nfunction isSpecialRemark(value) {\r\n    if (value === 'f' || value === 'k') return true;\r\n    return false;\r\n}\r\n\r\nfunction getFillColor(percentage) {\r\n    const colors = [\"#32a852\", \"#32a852\", \"#34a751\", \"#35a651\", \"#37a550\", \"#38a350\", \"#3aa24f\", \"#3ba14f\", \"#3da04e\", \"#3e9f4e\", \"#409e4d\", \"#419d4d\", \"#439b4c\", \"#449a4c\", \"#46994b\", \"#47984b\", \"#49974a\", \"#4a964a\", \"#4c9549\", \"#4d9349\", \"#4f9248\", \"#509147\", \"#529047\", \"#538f46\", \"#558e46\", \"#568d45\", \"#588b45\", \"#598a44\", \"#5b8944\", \"#5c8843\", \"#5e8743\", \"#5f8642\", \"#618542\", \"#628341\", \"#648241\", \"#658140\", \"#678040\", \"#687f3f\", \"#6a7e3f\", \"#6b7d3e\", \"#6d7b3e\", \"#6e7a3d\", \"#70793c\", \"#71783c\", \"#73773b\", \"#74763b\", \"#76753a\", \"#77733a\", \"#797239\", \"#7a7139\", \"#7c7038\", \"#7d6f38\", \"#7f6e37\", \"#806d37\", \"#826c36\", \"#836a36\", \"#856935\", \"#866835\", \"#886734\", \"#896634\", \"#8b6533\", \"#8c6432\", \"#8e6232\", \"#8f6131\", \"#916031\", \"#925f30\", \"#945e30\", \"#955d2f\", \"#975c2f\", \"#985a2e\", \"#9a592e\", \"#9b582d\", \"#9d572d\", \"#9e562c\", \"#a0552c\", \"#a1542b\", \"#a3522b\", \"#a4512a\", \"#a6502a\", \"#a74f29\", \"#a94e29\", \"#aa4d28\", \"#ac4c27\", \"#ad4a27\", \"#af4926\", \"#b04826\", \"#b24725\", \"#b34625\", \"#b54524\", \"#b64424\", \"#b84223\", \"#b94123\", \"#bb4022\", \"#bc3f22\", \"#be3e21\", \"#bf3d21\", \"#c13c20\", \"#c23a20\", \"#c4391f\", \"#c5381f\", \"#c7371e\"];\r\n    return colors[100 - Math.round(percentage)];\r\n}\r\n\r\n// function writeRotatedText(text, config = {}) {\r\n//     const {font = '20pt Arial', rotate = -0.5 * Math.PI} = config;\r\n//     let ctx;\r\n//     const canvas = document.createElement('canvas');\r\n//     canvas.width = 50;\r\n//     canvas.height = 300;\r\n//     ctx = canvas.getContext('2d');\r\n//     ctx.font =  font;\r\n//     ctx.save();\r\n//     ctx.translate(50, 300);\r\n//     ctx.rotate(rotate);\r\n//     ctx.fillStyle = '#000';\r\n//     ctx.fillText(text, 0, 0);\r\n//     ctx.restore();\r\n//     return canvas.toDataURL();\r\n// };\r\n\r\nexport default Report;",["67","68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":13},{"ruleId":"73","severity":1,"message":"77","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":12},{"ruleId":"78","severity":1,"message":"79","line":87,"column":8,"nodeType":"80","endLine":87,"endColumn":22,"suggestions":"81"},{"ruleId":"73","severity":1,"message":"82","line":16,"column":25,"nodeType":"75","messageId":"76","endLine":16,"endColumn":33},{"ruleId":"73","severity":1,"message":"83","line":41,"column":7,"nodeType":"75","messageId":"76","endLine":41,"endColumn":28},{"ruleId":"73","severity":1,"message":"84","line":58,"column":7,"nodeType":"75","messageId":"76","endLine":58,"endColumn":23},{"ruleId":"69","replacedBy":"85"},{"ruleId":"71","replacedBy":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'Plot' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'firstStudent'. Either include it or remove the dependency array.","ArrayExpression",["89"],"'metaData' is assigned a value but never used.","'generateDocDefinition' is assigned a value but never used.","'generateContents' is assigned a value but never used.",["87"],["88"],"no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [data, canvas, firstStudent]",{"range":"92","text":"93"},[3600,3614],"[data, canvas, firstStudent]"]